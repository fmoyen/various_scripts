#!/bin/bash

#####################################################################################
# Check if root user
#

if [ `whoami` != "root" ]
then
  echo
  echo "You're not root. You need to execute this script with root privileges"
  echo "Think of sudo command..."
  echo "Exiting"
  exit 0
fi

#####################################################################################
# Parameters
#
BackupMountPoint=/USBDisk
BackupDir=$BackupMountPoint/BorgMopjenkins

AllBackupNames="root jenkins_home jenkins"

Menu=1 # 0 => action given with a parameter ==> no menu, just doing action


#####################################################################################
# FUNCTIONS
#
function MountVolume
{
  mount_path=$1

  echo "-----------------------------------------------"
  echo "Creating the MountPoint $mount_path if needed"
  mkdir -p $mount_path
  ls -lad $mount_path
  echo "Done"
  echo

  echo "Mounting the destination volume"
  mount $mount_path
  df -h $mount_path
  IsMounted=`df | grep $mount_path | wc -l`
  if [ $IsMounted -ne 1 ]
  then
    echo "$mount_path is not mounted / available"
    echo "Please Check why"
    echo "Exiting ..."
    echo
    exit 1
  fi

  echo "Done"
}

function UmountVolume
{
  mount_path=$1

  echo "-----------------------------------------------"
  echo "UNmounting the destination volume"
  umount $mount_path

  IsMounted=`df  | grep $mount_path | wc -l`
  if [ $IsMounted -eq 1 ]
  then
    echo "$mount_path is STILL mounted"
    echo "Please Check why"
    echo "Exiting ..."
    echo
    exit 1
  fi
  echo "Done"
}

function CheckMountVolume
{
  mount_path=$1

  IsMounted=`df | grep "$mount_path" | wc -l`
  if [ $IsMounted -ne 1 ]
  then
    echo " Repository is not mounted onto $mount_path !!"
    return 1
  else
    return 0
  fi

  echo "Done"
}

function ListBorgBackups
{
  # Assuming the Borg Backup repository is accessible (mounted)
  borg_repo=$1

  echo "-----------------------------------------------"
  echo "Listing the available Borg backups:"
  echo
  echo "#############################################################"
  borg list $borg_repo
  echo "#############################################################"

  echo
}

function DetailBorgBackups
{
  # Assuming the Borg Backup repository is accessible (mounted)
  borg_repo=$1
  backup=$2

  echo "-----------------------------------------------"
  echo "Listing the Borg backup: $2"
  echo
  echo "#############################################################"
  borg list ${borg_repo}::$backup
  echo "#############################################################"

  echo
}

function HitENTER 
{
  if [ "$1" == "" ]; then
    echo;echo "Hit ENTER"
    read a
  fi
}

#####################################################################################
# MAIN
#

# What to do given with a parameter
if [ $# -eq 1 ]
then
  Menu=0
  WhatToDo=$1 
fi

# Mount volume
MountVolume  "$BackupMountPoint"

# Menu
Choice=1

while [ $Choice -eq 1 ]
do
  if [ $Menu -eq 1 ]; then
    EmptyMeansHitENTER=""
    clear
    echo "Backup directory: $BackupDir"
    echo "-----------------"
    df -h $BackupDir

    echo
    echo "BACKUP TOOL for LINUX with BORG"
    echo "----------------------------"
    echo
    echo "mount)             Mount the USBDisk volume in order to restore/backup some files"
    echo
    echo "list)              List the available backups"
    echo "detail)            List the files included inside a backup"
    echo
    echo "root)              Do the '/' filesystems borg backup (root)"
    echo "jenkins_home)      Do the '/var/jenkins_home' filesystems borg backup (Homedir for MYJENKINS jenkins user)"
    echo "jenkins)           Do the '/var/jenkins' filesystems borg backup (directory for mopjenkins jenkins slave node)"
    echo
    echo "all)               Do all filesystems (`echo $AllBackupNames`) borg backups"
    echo
    echo "borgmount)         Borg mount the volumes under /borgmnt"
    echo "borgumount)        Borg UNmount the volumes under /borgmnt"
    echo
    echo "prune)             Borg prune (cleaning obsolete backups)"
    echo
    echo "extract)           Get the command for extracting (restore) a backup"
    echo "umount)            UNmount the USBDisk volume in order to unplug the disk"
    echo
    echo "init)              Initialize the Borg Repo volume $BackupDir/BorgRepo (DANGEROUS!!)"
    echo "exit)              Exit this Backup Tool"
    echo
    echo -e "? --> \c"

    read WhatToDo
    echo
  fi

  # If ALL backups requested, $WhatTodo contains all backup name
  if [ "$WhatToDo" == "all" ]; then
    WhatToDo=$AllBackupNames
  fi

  # Doing what has been requested
  for action in $WhatToDo; do

    case $action in

      #------------------------------------------------------------------------------------
      # MOUNT Requested
      mount)
        echo "Mount requested... Mounting the crypted volume"
  
        MountVolume  "$BackupMountPoint"
      ;;

      #------------------------------------------------------------------------------------
      # LISTING Requested
      list)
        CheckMountVolume $BackupMountPoint
        if [ `echo $?` -ne 0 ]
        then
          echo "Could be a good idea to first mount the Backup Volume !"
        else
          ListBorgBackups $BackupDir/BorgRepo
        fi
      ;;

      #------------------------------------------------------------------------------------
      # DETAIL Requested
      detail)
        ListBorgBackups $BackupDir/BorgRepo
        echo
        echo "From which backup do you want to see the detailed files list ?: "
        read detail
        echo
        DetailBorgBackups $BackupDir/BorgRepo $detail | more
      ;;

      #------------------------------------------------------------------------------------
      # Borg pruning Requested
      prune)
        keepDaily=7
        keepWeekly=4
        keepMonthly=6
        echo "which Backup do you want to prune?:"
	echo "($AllBackupNames)"
	echo -e "    -> \c"
        read BackupName
        echo "Describe the requested options for Home borg pruning:"
        echo -e "    --keep-daily [$keepDaily]: \c"
        read answer
        if [ "$answer" != "" ] && [ $answer != $keepDaily ]; then keepDaily=$answer; fi
        echo -e "    --keep-weekly [$keepWeekly]: \c"
        read answer
        if [ "$answer" != "" ] && [ $answer != $keepWeekly ]; then keepWeekly=$answer; fi
        echo -e "    --keep-monthly [$keepMonthly]: \c"
        read answer
        if [ "$answer" != "" ] && [ $answer != $keepMonthly ]; then keepMonthly=$answer; fi

        echo
        echo "Borg Pruning Simulation:"
        echo "borg prune -v --list --dry-run --prefix=\"$BackupName-\" --keep-daily=$keepDaily --keep-weekly=$keepWeekly --keep-monthly=$keepMonthly $BackupMountPoint/BorgRepo"
        borg prune -v --list --dry-run --prefix="$BackupName-" --keep-daily=$keepDaily --keep-weekly=$keepWeekly --keep-monthly=$keepMonthly $BackupDir/BorgRepo

        prune=N
        echo;echo -e "Do you want to prune [N/y] ? : \c"
        read prune
        if [ "$prune" == "y" ] || [ "$prune" == "Y" ]
        then
           borg prune -v --list --prefix='root-' --keep-daily=$keepDaily --keep-weekly=$keepWeekly --keep-monthly=$keepMonthly $BackupDir/BorgRepo
        fi
      ;;

      #------------------------------------------------------------------------------------
      # UNMOUNT Requested

      umount)
        echo "UNmount requested... UNmounting the crypted volume"

        UmountVolume "$BackupMountPoint"
      ;;

      #------------------------------------------------------------------------------------
      # EXTRACT Requested
      extract)
        ListBorgBackups $BackupDir/BorgRepo
        echo
        echo "Which backup do you want to extract ?: "
        read detail
        echo
        echo "Hereunder a proposal for extracting the backup:"
        echo "-----------------------------------------------"
        echo "cd / ; borg extract --list $BackupDir/BorgRepo::$detail"
        echo "(please verify everything is fine before using this command !)"
      ;;

      #------------------------------------------------------------------------------------
      # INIT Requested
      init)
        echo "-----------------------------------------------"
        echo "Initializing the Borg Repository"
        echo; echo -e "Are you sure (this will delete all existing backups) [y/N] : \c"
        read Sure
        if [ "$Sure" == "y" ]; then
          mkdir $BackupDir/BorgRepo
          borg init --encryption=none $BackupDir/BorgRepo
          echo "Done"
          echo
        fi
      ;;

      #------------------------------------------------------------------------------------
      # root backup Requested
      root)
        Today=$(date +%Y-%m-%d-%H%M%S)
        FolderToBackup=/
        BackupPrefix=$action

	echo "Doing $action borg backup..."
        borg create --verbose --stats --progress --one-file-system --compression zlib $BackupDir/BorgRepo::$BackupPrefix-$Today $FolderToBackup

        echo "Backup is finished"
      ;;

      #------------------------------------------------------------------------------------
      # jenkins_home backup Requested
      jenkins_home)
        Today=$(date +%Y-%m-%d-%H%M%S)
        FolderToBackup=/var/jenkins_home
        BackupPrefix=$action
  
	echo "Doing $action borg backup..."
        borg create --verbose --stats --progress --compression zlib $BackupDir/BorgRepo::$BackupPrefix-$Today $FolderToBackup
  
        echo "Backup is finished"
      ;;

      #------------------------------------------------------------------------------------
      # jenkins backup Requested
      jenkins)
        Today=$(date +%Y-%m-%d-%H%M%S)
        FolderToBackup=/var/jenkins
        BackupPrefix=$action
  
	echo "Doing $action borg backup..."
        borg create --verbose --stats --progress --compression zlib $BackupDir/BorgRepo::$BackupPrefix-$Today $FolderToBackup
  
        echo "Backup is finished"
      ;;

      #------------------------------------------------------------------------------------
      # Borg mount Requested
      borgmount)
        CheckMountVolume "$BackupMountPoint"
        if [ `echo $?` -ne 0 ]
        then
          echo "Could be a good idea to first mount the Crypted Volume !"
        else
         ListBorgBackups $BackupDir/BorgRepo
        fi
        mkdir -p /borgmnt
        echo;echo "Choose one backup to mount (or empty means ALL)"
        read backupToMount
        if [ -z $backupToMount ]
        then
          borg mount $BackupDir/BorgRepo /borgmnt
        else
          borg mount $BackupDir/BorgRepo::$backupToMount /borgmnt
        fi

        pwdBefore=$PWD
        echo;echo "Opening a BASH shell into /borgmnt (CTRL-D to return to this menu)"
        cd /borgmnt;bash

        cd $pwdBefore
	umount /borgmnt
        EmptyMeansHitENTER="NO"
      ;;

      #------------------------------------------------------------------------------------
      # Borg UNmount Requested
      borgumount)
        echo "Borg UNmount requested... UNmounting /borgmnt"
        umount /borgmnt
      ;;

      #------------------------------------------------------------------------------------
      # EXIT Requested
      exit)
       echo "Exiting as requested"
       UmountVolume "$BackupMountPoint"
       echo
       echo "Bye !!"
       echo
       Choice=0
       EmptyMeansHitENTER="NO"
       ;;
    esac

  done # for-loop for ALL case

  if [ $Menu -eq 0 ]; then
    EmptyMeansHitEnter="NO"
    Choice=0
  fi

  HitENTER $EmptyMeansHitENTER

done # while-loop to go back to menu when done

