#!/bin/bash

###################################################################################################################################
# Date: 2019/11
# Author: Fabrice MOYEN
# Objective: Apply Password security rules

# STEPS WE SHOULD DO:
#  - check if root
#  - check the OS running
#  - Configure password expiration period (/etc/login.defs) 
#  - "Chage" for existing users to apply them the new expiration period
#  - Configure password quality (RHEL: /etc/pam.d/system-auth, Ubuntu: /etc/pam.d/common-password)

# RULES to follow:
#  - Maximum 1 year old
#  - 15 characters minimum
#  - a mix of 2 character types (uppercase, lowercase, numbers, special characters)


###################################################################################################################################
# Check if root
#

if [ `whoami` != "root" ]
then
  echo
  echo "You're not root. You need to execute this script with root privileges"
  echo "Think of sudo command..."
  echo "Exiting"
  exit 0
fi

###################################################################################################################################
# Parameters
#
ExistingUsersList=(castella mesnet fmoyen)
UsersIndexMax=$((${#ExistingUsersList[*]}-1))
PWExpirationFile=/etc/login.defs
#PWExpirationFile=/home/capiteam/fmoyen/Downloads/PWExpirationFile  # for Testing purpose

PASS_MAX_DAYS=365	#    PASS_MAX_DAYS   Maximum number of days a password may be used.
PASS_MIN_DAYS=0		#    PASS_MIN_DAYS   Minimum number of days allowed between password changes.
PASS_WARN_AGE=14	#    PASS_WARN_AGE   Number of days warning given before a password expires.

PWQualityLine2Search="pam_pwquality.so"
PWQualityOptions="local_users_only retry=4 minlen=15 difok=4 lcredit=-1 dcredit=-1 reject_username"
#PWQualityOptions="local_users_only retry=4 minlen=15 difok=4 lcredit=-1 ucredit=-1 reject_username enforce_for_root"
PWQualityNewLine="password requisite pam_pwquality.so $PWQualityOptions"
#    retry: No. of consecutive times a user can enter an incorrect password.
#    minlen: Minimum length of password
#    difok: No. of character changes (inserts, removals, or replacements) between the old and new password that are enough to accept the new password.

#    lcredit: Min No. of lowercase letters
#    ucredit: Min No. of uppercase letters
#    dcredit: Min No. of digits (decimal numbers)
#    ocredit: Min No. of symbols, special characters
#      (N < 0) This is the minimum number of case letters/digits/symbols that must be met for a new password.

#    reject_username: Rejects the password containing the user name
#    enforce_for_root: Also enforce the policy for the root user

OS_ID=`cat /etc/os-release | grep "^ID=" | awk -F"=" '{print $2}' | sed 's/"//g'`
whoAmI=`who am i| awk '{print $1}'`

###################################################################################################################################
# Functions
#

function DoBackupFile {
   file=$1
   today=$(date +%Y-%m-%d-%H%M%S)
   BackupFile="$file-$today.bak"
   echo;echo "-----------------------------------------------------------------------------------------------------------"
   echo "Backing up file $file ---> $BackupFile"
   rsync -av $file $BackupFile >/dev/null
   ls -la $file $BackupFile
   echo "-----------------------------------------------------------------------------------------------------------"
}

function Title {
   msg=$1
   echo; echo
   echo "==========================================================================================================="
   echo $msg
   echo "==========================================================================================================="
}

###################################################################################################################################
# Main
#

#----------------------------------------------------------------------------------------------------------------------------------
# Check which OS's running

echo;echo "-----------------------------------------------------------------------------------------------------------"
if [[ $OS_ID == "rhel" ]] || [[ $OS_ID == "fedora" ]]; then
   echo "RedHAT RHEL-like has been detected"
   PWQualityFile=/etc/pam.d/system-auth
   OS_ID="rhel"
elif [[ $OS_ID == "ubuntu" ]] || [[ $OS_ID == "debian" ]]; then
   echo "Canonical UBUNTU-like has been detected"
   PWQualityFile=/etc/pam.d/common-password
   OS_ID="ubuntu"
fi
#PWQualityFile=/home/capiteam/fmoyen/Downloads/PWQualityFile # for testing purpose
echo "-----------------------------------------------------------------------------------------------------------"


#----------------------------------------------------------------------------------------------------------------------------------
# Change Password Expiration Rules

Title "Changing Password Expiration Rules"
DoBackupFile $PWExpirationFile 
PWExpirationFile_Backup=$BackupFile

echo;echo "-----------------------------------------------------------------------------------------------------------"
echo "Changing parameters in $PWExpirationFile"
for world in PASS_MAX_DAYS PASS_MIN_DAYS PASS_WARN_AGE; do 
   sed -i "s/^${world}.*/$world ${!world}/g" $PWExpirationFile
done
echo "-----------------------------------------------------------------------------------------------------------"

echo;echo "-----------------------------------------------------------------------------------------------------------"
echo "diff $PWExpirationFile_Backup $PWExpirationFile"
diff $PWExpirationFile_Backup $PWExpirationFile
echo "-----------------------------------------------------------------------------------------------------------"

echo;echo "-----------------------------------------------------------------------------------------------------------"
echo "Applying expiration rules to existing users"
echo "  -->  ${ExistingUsersList[@]}"
for userindex in `seq 0 $UsersIndexMax`; do
   user=${ExistingUsersList[$userindex]}
   echo;echo $user
   chage --mindays $PASS_MIN_DAYS --maxdays $PASS_MAX_DAYS  --warndays $PASS_WARN_AGE $user
   chage -l $user
done
echo "-----------------------------------------------------------------------------------------------------------"


#----------------------------------------------------------------------------------------------------------------------------------
# Configure password quality

Title "Configure password quality"
DoBackupFile $PWQualityFile 
PWQualityFile_Backup=$BackupFile

if [[ $OS_ID == "ubuntu" ]]; then 
   echo;echo "-----------------------------------------------------------------------------------------------------------"
   echo "apt install -y libpam-pwquality >/dev/null"
   apt install -y libpam-pwquality >/dev/null
   echo "-----------------------------------------------------------------------------------------------------------"
fi

echo;echo "-----------------------------------------------------------------------------------------------------------"
PWQualityLine2Replace=`grep "$PWQualityLine2Search" $PWQualityFile`
echo "Replacing the following line in $PWQualityFile"
echo "   $PWQualityLine2Replace"
echo "by"
echo "   $PWQualityNewLine"
sed -i "s/$PWQualityLine2Replace/$PWQualityNewLine/" $PWQualityFile
echo "-----------------------------------------------------------------------------------------------------------"

echo;echo "-----------------------------------------------------------------------------------------------------------"
echo "diff $PWQualityFile_Backup $PWQualityFile"
diff $PWQualityFile_Backup $PWQualityFile
echo "-----------------------------------------------------------------------------------------------------------"
