#!/bin/bash

###################################################################################################################################
# Date: 2021/01
# Author: Fabrice MOYEN
# Objective: Apply Accounts log retention rules

# STEPS WE SHOULD DO:
#  - check if root
#  - check the OS running
#  - Configure logrotate in order to keep accounts log retention during 90 days

# RULES to follow:
#  - Accounts log info kept during 90 days


###################################################################################################################################
# Functions
#

function usage
{
  echo
  echo "`basename $0` Usage:"
  echo "-------------------------"
  echo
  echo "  + script to be run on the system you want to tune"
  echo
  echo "  + You need to be root to use the script (sudo)"
  echo
  echo "  + Objective: Apply Accounts log retention rules (Configure logrotate in order to keep accounts log retention during 90 days)"
  echo "  + -h / -? / --help: shows this usage info"
  echo
  exit 0
}

function DoBackupFile {
   today=$(date +%Y-%m-%d-%H%M%S)
   file=$1
   if [[ $# -eq 2 ]]; then 
      destdir=$2
      backupfile="$destdir/`basename $file`-$today.bak"
   else
      backupfile="$file-$today.bak"
   fi
   echo;echo "-----------------------------------------------------------------------------------------------------------"
   echo "Backing up file $file ---> $backupfile"
   rsync -av $file $backupfile >/dev/null
   ls -la $file $backupfile
   echo
   echo "$backupfile:"
   cat $backupfile
   echo "-----------------------------------------------------------------------------------------------------------"
}


###################################################################################################################################
# When parameters are given when launching the script
#

if [ $# -gt 0 ]
then
  WhatToDo=$1
  if [ "$WhatToDo" == "-h" ] || [ "$WhatToDo" == "-?" ] || [ "$WhatToDo" == "--help" ]; then
    usage
  fi
fi


###################################################################################################################################
# Check if root
#

if [ `whoami` != "root" ]
then
  echo
  echo "You're not root. You need to execute this script with root privileges"
  echo "Think of sudo command..."
  echo "Exiting"
  exit 0
fi


###################################################################################################################################
# Parameters
#

TMPDir=/tmp
TMPFile=$TMPDir/tempo ; > $TMPFile

OS_ID=`cat /etc/os-release | grep "^ID=" | awk -F"=" '{print $2}' | sed 's/"//g'`
#WhoAmI=`who am i| awk '{print $1}'` # "whoami" not working because of sudo # "who am i" not working when script is run through ssh
WhoAmI="fmoyen"
eval OutputFile=~$WhoAmI/CAPI/SECURITY/90DaysLog.out # generic $HOME is not OK to use as this script is run with sudo (so $HOME=/root)
mkdir -p `dirname $OutputFile`


###################################################################################################################################
# MAIN
#
{
echo; echo; echo "###################################################################################################################################"
hostname | tr '[:lower:]' '[:upper:]'
echo "-----------------------------------------------------------------------------------------------------------------------------------"
echo "$WhoAmI --> `basename $0` "
date
echo
echo "Output report file: $OutputFile"
echo "###################################################################################################################################"; echo


#----------------------------------------------------------------------------------------------------------------------------------
# Check which OS's running

echo;echo "-----------------------------------------------------------------------------------------------------------"
if [[ $OS_ID == "rhel" ]] || [[ $OS_ID == "fedora" ]] || [[ $OS_ID == "centos" ]]; then
   echo "RedHAT RHEL-like has been detected"
   Input=/etc/logrotate.d/syslog
   OS_ID="rhel"
elif [[ $OS_ID == "ubuntu" ]] || [[ $OS_ID == "debian" ]]; then
   echo "Canonical UBUNTU-like has been detected"
   Input=/etc/logrotate.d/rsyslog
   OS_ID="ubuntu"
fi

InputName=$(basename $Input)
NewInput=$TMPDir/new$InputName; > $NewInput
echo "-----------------------------------------------------------------------------------------------------------"


#----------------------------------------------------------------------------------------------------------------------------------
# Backuping $Input file

DoBackupFile $Input $TMPDir


#----------------------------------------------------------------------------------------------------------------------------------
# Doing the work onto $Input file

# '' (the null string) is a magic value used to represent blank lines according to POSIX:
# If RS='' then records are separated by sequences consisting of a <newline> plus one or more blank lines,
# (So a record is a whole paragraph)

# The output paragraphs will not be separated since the output separator remains a single newline.
# To ensure that there is a blank line between output paragraphs, set the output record separator to two newlines: ORS='\n\n'

if [[ $OS_ID == "rhel" ]] || [[ $OS_ID == "fedora" ]] || [[ $OS_ID == "centos" ]]; then
   awk -v RS='' -v ORS='\n\n' '!/secure/' $Input >> $NewInput   # Every paragraphs without the $Pattern (separated by a blank line)
   awk -v RS='' '/secure/' $Input > $TMPFile   # The paragraph with the $Pattern
elif [[ $OS_ID == "ubuntu" ]] || [[ $OS_ID == "debian" ]]; then
   awk -v RS='' -v ORS='\n\n' '!/auth.log/' $Input >> $NewInput   # Every paragraphs without the $Pattern (separated by a blank line)
   awk -v RS='' '/auth.log/' $Input > $TMPFile   # The paragraph with the $Pattern
fi

sed -i 's/daily$/weekly/g' $TMPFile   # replacing "daily" by "weekly" if it exists
sed -i 's/monthly$/weekly/g' $TMPFile   # replacing "monthly" by "weekly" if it exists
sed -i 's/rotate .*/rotate 13/g' $TMPFile   # replacing "rotate <with any number>" by "rotate 13" if it exists

if ! grep "weekly" $TMPFile >/dev/null; then  # if no weekly, adding "\tweekly" (\t=tab) after "{" line
  sed -i '/{/a\
  \tweekly' $TMPFile
fi

if ! grep "rotate " $TMPFile >/dev/null; then  # if no rotate, adding "\trotate 13" (\t=tab) after "{" line
  sed -i '/{/a\
  \trotate 13' $TMPFile
fi

cat $TMPFile >> $NewInput
cp $NewInput $Input
rm $TMPFile $NewInput

echo;echo "-----------------------------------------------------------------------------------------------------------"
echo "NEW $Input file"
echo "----------------------------------"
cat $Input
echo "-----------------------------------------------------------------------------------------------------------"

echo;echo "-----------------------------------------------------------------------------------------------------------"
echo "/etc/cron.daily/logrotate executed everyday by cron ==> no logrotate daemon to restart after modifying its config"
echo "-----------------------------------------------------------------------------------------------------------"
echo
} | tee -a $OutputFile

chown $WhoAmI:$WhoAmI $OutputFile
